// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract GunGameToken is ERC20, Ownable {
    struct Weapon {
        uint256 weaponId;
        uint256 price;
        string weaponName;
        uint256 Ammo; }
    constructor() ERC20("Salonga", "GNTKN") Ownable(msg.sender) { initializeWeapons(); }
    function initializeWeapons() internal {
        weaponRegistry[1] = Weapon(1, 1000, "Pistol", 30); weaponRegistry[5] = Weapon(5, 1080, "Grenade", 15);
        weaponRegistry[2] = Weapon(2, 4500, "Shotgun", 60);weaponRegistry[6] = Weapon(6, 1600, "Machine Gun", 20);
        weaponRegistry[3] = Weapon(3, 5200, "Rifle", 90);weaponRegistry[7] = Weapon(7, 8000, "Rocket Launcher", 120);
        weaponRegistry[4] = Weapon(4, 5250, "Sniper", 30);weaponRegistry[8] = Weapon(8, 1000, "Ammo Pack", 5);
        weaponRegistry[9] = Weapon(9, 10000, "Flamethrower", 180); weaponRegistry[10] = Weapon(10, 35000, "Mini Gun", 365);
        weaponRegistry[11] = Weapon(11, 5200, "Energy Shield", 90);weaponRegistry[12] = Weapon(12, 15300, "Plasma Gun", 150);
        weaponRegistry[13] = Weapon(13, 5400, "Laser Sword", 45); }
    function decimals() public pure override returns (uint8) { return 0; }
    function issueTokens(address recipient, uint256 amount) external onlyOwner {
        _mint(recipient, amount);
        emit TokensMinted(recipient, amount); }
    function purchaseWeapon(uint256 weaponId) external {
        require(weaponRegistry[weaponId].price > 0, "Weapon does not exist.");
        require(balanceOf(msg.sender) >= weaponRegistry[weaponId].price, "Not enough tokens.");
        _burn(msg.sender, weaponRegistry[weaponId].price);
        userWeaponRecords[msg.sender][weaponId] += 1;
        emit WeaponPurchased(msg.sender, weaponId, weaponRegistry[weaponId].price);}
    function burnTokens(uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "Not enough tokens.");
        _burn(msg.sender, amount);
        emit TokensBurned(msg.sender, amount);}
    function activateWeapon(uint256 weaponId) external {
        require(userWeaponRecords[msg.sender][weaponId] > 0, "Weapon not owned.");
        userWeaponRecords[msg.sender][weaponId] -= 1;
        uint256 expirationTime = block.timestamp + (weaponRegistry[weaponId].Ammo * 1 days);
        weaponExpiration[msg.sender][weaponId] = expirationTime;
        activatedWeapons[msg.sender].push(weaponId);
        emit WeaponActivated(msg.sender, weaponId, weaponRegistry[weaponId].weaponName, expirationTime);}
    function addWeapon(uint256 id, uint256 price, string memory name, uint256 Ammo) external onlyOwner {
        require(weaponRegistry[id].price == 0, "Weapon already exists.");
        weaponRegistry[id] = Weapon(id, price, name, Ammo);}
    function viewBalance() external view returns (uint256) {
        return balanceOf(msg.sender);}
    function getWeaponDescription(uint256 weaponId) external view returns (string memory) {
        require(weaponId >= 1 && weaponId <= 13, "Weapon ID out of range");
        Weapon memory weapon = weaponRegistry[weaponId];
        string memory description = string(abi.encodePacked(
            "Weapon ID: ", uintToString(weapon.weaponId), "\n",
            "Weapon Name: ", weapon.weaponName, "\n",
            "Price: ", uintToString(weapon.price), " GGT\n",
            "Duration: ", uintToString(weapon.Ammo), " days\n"));return description;}
    function viewUserWeapons() external view returns (string memory) {
        string memory userWeapons = "Your Weapons:\n";
        for (uint256 i = 1; i <= 13; i++) {
            userWeapons = string(abi.encodePacked(
                userWeapons, weaponRegistry[i].weaponName, " (", uintToString(userWeaponRecords[msg.sender][i]), ")\n"));} return userWeapons;}
    function viewActivatedWeapons() external view returns (string memory) {
        string memory activatedWeaponsList = "Activated Weapons:\n";
        for (uint256 i = 0; i < activatedWeapons[msg.sender].length; i++) {
            uint256 weaponId = activatedWeapons[msg.sender][i];
            activatedWeaponsList = string(abi.encodePacked(
                activatedWeaponsList, weaponRegistry[weaponId].weaponName, " (Expires: ", uintToString(weaponExpiration[msg.sender][weaponId]), ")\n"
            )); } return activatedWeaponsList; }
    function uintToString(uint256 value) internal pure returns (string memory) {
        if (value == 0) {
            return "0";
        }
        uint256 maxLength = 78;
        bytes memory reversed = new bytes(maxLength);
        uint256 i = 0;
        while (value != 0) {
            uint256 remainder = value % 10;
            value /= 10;
            reversed[i++] = bytes1(uint8(48 + remainder));
        }
        bytes memory s = new bytes(i);
        for (uint256 j = 0; j < i; j++) {
            s[j] = reversed[i - j - 1];
        }return string(s);}

    event TokensMinted(address indexed beneficiary, uint256 amount);
    event WeaponPurchased(address indexed player, uint256 weaponId, uint256 price);
    event TokensBurned(address indexed account, uint256 amount);
    event WeaponActivated(address indexed user, uint256 weaponId, string weaponName, uint256 expirationTime);

    mapping(uint256 => Weapon) private weaponRegistry;
    mapping(address => mapping(uint256 => uint256)) private userWeaponRecords;
    mapping(address => uint256[]) private activatedWeapons;
    mapping(address => mapping(uint256 => uint256)) private weaponExpiration;
}
